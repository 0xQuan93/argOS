import { z } from "zod";
import { Agent } from "../components";
import { getAgentRoom } from "../utils/queries";
import { logger } from "../utils/logger";
import { EventBus } from "../runtime/EventBus";
import { World } from "bitecs";
import { ActionResultType } from "../components";

export const schema = z.object({
  thought: z.string().describe("The thought content to record"),
  category: z
    .enum(["insight", "analysis", "decision", "observation"])
    .describe("The type of thought"),
  metadata: z
    .record(z.any())
    .optional()
    .describe("Any additional metadata about the thought"),
});

export const action = {
  name: "think",
  description:
    "Record a thought or insight generated by the agent's cognitive process",
  parameters: ["thought", "category", "metadata"],
  schema,
};

export async function execute(
  world: World,
  eid: number,
  parameters: z.infer<typeof schema>,
  eventBus: EventBus
): Promise<ActionResultType> {
  const roomId = getAgentRoom(world, eid);
  if (!roomId) {
    return {
      success: false,
      action: "think",
      result: "Cannot record thought - agent not in a room",
      timestamp: Date.now(),
      data: {
        metadata: { error: "No room found" },
      },
    };
  }

  const { thought, category, metadata } = parameters;
  const agentName = Agent.name[eid];

  // Log the thought
  logger.agent(eid, `Thought (${category}): ${thought}`, agentName);

  // Emit thought event to room
  eventBus.emitRoomEvent(
    roomId,
    "thought",
    {
      content: thought,
      category,
      metadata: {
        ...metadata,
        agentName,
      },
    },
    String(eid)
  );

  return {
    success: true,
    action: "think",
    result: thought,
    timestamp: Date.now(),
    data: {
      content: thought,
      metadata: {
        category,
        ...metadata,
      },
    },
  };
}
